<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: ruby | Keen on Art of Tech]]></title>
  <link href="http://lkunxyz.github.com/tags/ruby/atom.xml" rel="self"/>
  <link href="http://lkunxyz.github.com/"/>
  <updated>2013-01-01T20:55:27+08:00</updated>
  <id>http://lkunxyz.github.com/</id>
  <author>
    <name><![CDATA[Tiny]]></name>
    <email><![CDATA[admin@tinyxd.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[正则表达式]]></title>
    <link href="http://lkunxyz.github.com/blog/2012/07/07/regular-expressions-in-ruby/"/>
    <updated>2012-07-07T23:40:00+08:00</updated>
    <id>http://lkunxyz.github.com/blog/2012/07/07/regular-expressions-in-ruby</id>
    <content type="html"><![CDATA[<p>Ruby语言是一种“万事万物皆对象”的程序语言，正则表达式也是一个对象。正则表达式所属的类，就是Regexp类。<br/>
要建立正则表达式两种方法： <br/>
1.用“//”括住。  <br/>
2.当正则表达式内部用到“/”字符的时候，改用%r会比较方便。 示例%r(样式)
下面介绍一些规则。 <br/>
1.^ 行首匹配 $行尾匹配 \A 字符串头 \Z字符串尾 <br/>
2.指定想要匹配成功的文字范围用[]</p>

<pre><code>比如[A-Z]所有大写英文字母[A-Za-z]所有英文字母[0-9]所有阿拉伯数字[^ABC]A、B、C以外的字   
</code></pre>

<p>3.匹配任意字符用.</p>

<pre><code>想要指定字数/^…$/ 刚好三个字的一行   
配合“*”等转义字符使用   
</code></pre>

<!--more-->


<p>4.使用反斜杠的样式（“\”+“一个英文字母”）</p>

<pre><code>\s 空白 会与空白字符（0x20）、定位字符、换行字符、换页字符匹配成功   
\d与0-9之间的数字匹配成功
\w与英文与数字匹配成功
\A与字符串前端匹配成功
\Z与字符串末端匹配成功
</code></pre>

<p>5.将转义字符当作一般字符</p>

<pre><code>“\”后接上“^”、“$”、“[”这些英文、数字以外的转义字符时，这些字符就不在具备转义字符的效用了，而可以去匹配这些字符本身。
</code></pre>

<p>6.匹配连续出现的相同字符或单字</p>

<pre><code>*出现0次以上
+出现1次以上
?出现0次或1次
</code></pre>

<p>7.最短匹配</p>

<pre><code>*?出现0次以上，但取最短的匹配结果
+?出现1次以上，但取最短的匹配结果
</code></pre>

<p>8.“()”与反复</p>

<pre><code>使用“()”可以多个字构成的字符串反复匹配
</code></pre>

<p>9.多选</p>

<pre><code>/^(ABC|DEF)$/
正则项选项/```/后面类似/.../ei
i忽略英文大小写差异
s e u n 指定字符编码方式 s是Shift_JIS,e是EUC-JP，u是UTF-8 n是匹配是不考虑文字编码。
x忽略正则表达式内部的空白，并忽略“#”后面的内容。加上这个选项就可以在正则表达式内部写注释了。
m 让“.”能与换行符号匹配成功
p /DEF.GHI/m =~ "ABC\nDEF\nGHI" #=&gt; 4 匹配成功
</code></pre>

<br />


<p><strong>正则表达式的方法</strong>  <br/>
sub、gsub、scan  <br/>
sub方法只会取代第一个匹配成功处的字符串，而gsub则会取代所有匹配成功的字符串</p>

<pre><code>str = “abc def g hi”    
p str.sub(/\s+/,' ') #=&gt; "abc def g hi"   
p str.gsub(/\s+/,' ') #=&gt; "abc def g hi"   
</code></pre>

<p>scan跟gsub一样会匹配字符串里所有符合样式的部分，但只是获取不会取代。</p>

<br />


<p>取出服务器的地址的正则表达式：</p>

<pre><code>/http:\/\/([^\/]*)\// %r|http://([^/]*)/|   
</code></pre>

<p><code>ruby url_match.rb
str = "http://www.ruby-lang.org/ja/"   
%r|http://([^/]*)/| =~ str   
print "server address: ", $1, "\n"   
</code><br/>
运行：</p>

<pre><code>&gt;ruby url_match.rb   
server address: www.ruby-lang.org
</code></pre>

<p>正则表达式的圣书：<code>Mastering Regular Expressions, Third Edition (Jeffrey E.F.Friedl 著/O'REILLY 出版)</code></p>

<br />


<p>本站文章如果没有特别说明，均为<strong>原创</strong>，转载请以<strong>链接</strong>方式注明本文地址：<code>http://tinyxd.me/blog/2012/07/07/regular-expressions-in-ruby/</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ruby初学]]></title>
    <link href="http://lkunxyz.github.com/blog/2012/07/06/ruby-learning/"/>
    <updated>2012-07-06T23:43:00+08:00</updated>
    <id>http://lkunxyz.github.com/blog/2012/07/06/ruby-learning</id>
    <content type="html"><![CDATA[<p>这几天在学习Ruby，面对一个陌生的脚本语言，虽然陌生但是既然是脚本语言，自然也有与shell类似的地方，所以学习起来困难不是很大。 <br/>
在感受到脚本语言的方便后，试了个例子，如下计算一个文件中单词的个数，以空格来区分。 <br/>
``` ruby 统计单词个数ruby脚本word.rb</p>

<h1>计算单词个数</h1>

<p>count = Hash.new(0)</p>

<h2>统计单字</h2>

<p>while line = gets
words = line.split
words.each{|word|
count[word] += 1
}
end</p>

<h2>输出结果</h2>

<p>count.sort{|a,b|
a[1] &lt;=> b[1]
}.each{|key,value|
print "#{key}: #{value}\n"
}
<code>``
用法：</code>ruby word.rb your_file`</p>

<!--more-->


<p>还有个问题以后可能会经常遇到，用p方法来输出包括日文或者中文的字符串的时候，会发生一般所谓的“乱码”的输出结果。所以在执行ruby程序时需要加上-Ks、-Ke之类的环境参数，这些参数用来指定文字编码。针对中文字符串，可以制定-Ku参数（UTF-8）来取得正常的显示效果。</p>

<br />


<p>本站文章如果没有特别说明，均为<strong>原创</strong>，转载请以<strong>链接</strong>方式注明本文地址：<code>http://tinyxd.me/blog/2012/07/06/ruby-learning/</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决pygments.rb (RubyPython) 找不到libpython的问题(archlinux下)]]></title>
    <link href="http://lkunxyz.github.com/blog/2012/06/05/cannot-find-libpython/"/>
    <updated>2012-06-05T08:01:00+08:00</updated>
    <id>http://lkunxyz.github.com/blog/2012/06/05/cannot-find-libpython</id>
    <content type="html"><![CDATA[<p>本文章转自：<a href="http://ruby-china.org/topics/289">Ruby China 论坛</a> <br/>
如果找不到python，或者系统默认得python是3.x (比如Arch Linux)，手动制定下路径 <br/>
<code>
RubyPython.configure python_exe: '/usr/bin/python2.7'
</code>
对于rails项目比如ruby-china，可以把这行代码丢到config/initializers下。</p>

<p>不过RubyPython仍然可能找不到libpython而提示lib.so not found。这是由于RubyPython确定正确libpython的规则和你的系统不兼容，可以通过手动加些symbol links来解决 (目前RubyPython的git最新代码相对当前稳定版本0.5.3改动非常大，希望新版本能解决这个问题，就先不去提交fixing了)。</p>

<p>可以参考 PythonExec initialize 方法中的规则来建symbol link.</p>

<!--more-->


<p>首先运行该python，得到版本号x.y，以python2.7为例 <br/>
```
$ python2.7 -c "import sys;print '%d.%d' % sys.version_info[:2]"</p>

<p>=> 2.7
<code>
找到该python对应得libpython，可以用工具ldd:   
</code>
$ ldd /usr/lib/python2.7 | grep python</p>

<p>=> libpython2.7.so.1.0 => /usr/lib/libpython2.7.so.1.0
<code>
为找到的这个文件创建链接。下面用#{exe_base}表示通过RubyPython.configure指定的python可执行程序的文件名部分，#{x}和#{y}是通过运行这个python找到得版本号，#{libpython}是该python对应得libpython库文件路径。   
</code>
sudo ln -s #{libpython} /usr/lib/lib#{exe_base}#{x}#{y}.so
sudo ln -s #{libpython} /usr/lib/lib#{exe_base}#{x}.#{y}.so
<code>
以我的环境(Arch Linux)为例，exe_base是python2.7，版本号x.y是2.7，libpython是/usr/lib/libpython2.7.so.1.0，   
</code>
sudo ln -s /usr/lib/libpython2.7.so.1.0 /usr/lib/libpython2.727.so
sudo ln -s /usr/lib/libpython2.7.so.1.0 /usr/lib/libpython2.72.7.so
```</p>
]]></content>
  </entry>
  
</feed>
