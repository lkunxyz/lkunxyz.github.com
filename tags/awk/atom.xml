<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: awk | Keen on Art of Tech]]></title>
  <link href="http://lkunxyz.github.com/tags/awk/atom.xml" rel="self"/>
  <link href="http://lkunxyz.github.com/"/>
  <updated>2013-01-01T20:55:27+08:00</updated>
  <id>http://lkunxyz.github.com/</id>
  <author>
    <name><![CDATA[Tiny]]></name>
    <email><![CDATA[admin@tinyxd.me]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[awk 学习]]></title>
    <link href="http://lkunxyz.github.com/blog/2012/08/01/awk-study/"/>
    <updated>2012-08-01T00:15:00+08:00</updated>
    <id>http://lkunxyz.github.com/blog/2012/08/01/awk-study</id>
    <content type="html"><![CDATA[<p>AWK是一种优良的文本处理工具。它不仅是 Linux 中也是任何环境中现有的功能最强大的数据处理引擎之一。这种编程及数据操作语言（其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母）的最大功能取决于一个人所拥有的知识。AWK 提供了极其强大的功能：可以进行样式装入、流控制、数学运算符、进程控制语句甚至于内置的变量和函数。它具备了一个完整的语言所应具有的几乎所有精美特性。</p>

<h2>一、awk调用方式 </h2>

<p>1、awk [-F field-separator] 'commands' input-file(s)</p>

<p>commands 是真正的awk命令</p>

<p>-F 为域分隔符</p>

<!--more-->


<p>2、第二种方法是将所有a w k命令插入一个文件，并使a w k程序可执行，然后用a w k命令解释</p>

<p>器作为脚本的首行，以便通过键入脚本名称来调用它。</p>

<p>3、第三种方式是将所有的a w k命令插入一个单独文件，然后调用：</p>

<p>awk -f awk-script-file input-files(s)</p>

<p><code>-f</code>选项指明在文件awkscriptfile中的awk脚本， inputfile(s)是使用awk进行浏览的文件</p>

<p>名。</p>

<h2>二、awk脚本 </h2>

<p>1、awk由模式和动作组成，模式部分决定动作语句何时触发及触发事件</p>

<p>模式可以是任何条件语句或复合语句或正则表达式。 模式包括两个特殊字段BEGIN和END</p>

<p>如：</p>

<p>awk 'BEGIN{print "Name\n-----"}{print $1}END{"end-of-report"}'</p>

<p>2、域和记录</p>

<p>awk执行时，其浏览域标记为$1、$2...$n</p>

<p>$0指所有域</p>

<p>保存awk输出</p>

<p>(1)、awk '{print $0}' grade.txt >wow 即内容重定向</p>

<p>(2)、使用tee命令 awk '{print $0}' grade.txt | tee wow 既显示有写入文件</p>

<p>3、元字符</p>

<p>\ ^ $ . [] | () * + ?</p>

<p>其中：</p>

<p><code>+</code>使用+匹配一个或多个字符</p>

<p>？ 匹配模式出现频率。例如使用/XY?Z/匹配XYZ或YZ</p>

<p>4、条件操作符</p>

<p>&lt; 小于</p>

<p><code>&gt;= 大于等于</code></p>

<p>&lt;= 小于等于</p>

<p>~ 匹配正则表达式</p>

<p>== 等于</p>

<p>!~ 不匹配正则表达式</p>

<p>!= 不等于</p>

<p>(1)、awk '{if($4~/Brown/) print $0}' grade.txt</p>

<p>其中if后面的条件用()括起来</p>

<p>(2)、设置大小写 awk '/[Gg]reen/' grade.txt</p>

<p>(3)、任意字符<code>awk '$1~/^...a/' grade.txt</code></p>

<p>(4)、或关系匹配 awk '$0~/(Yellow)|(Brown)/' grade.txt</p>

<p>各表达式互相结合起来的表达式：</p>

<p>&amp;&amp; AND : 语句两边必须同时匹配为真。</p>

<p>|| OR：语句两边同时或其中一边匹配为真。</p>

<p>! 非求逆</p>

<p>5、内置变量</p>

<p>ARGC 命令行参数个数</p>

<p>ARGV 命令行参数排列</p>

<p>ENVIRON 支持队列中系统环境变量的使用</p>

<p>FILENAME awk浏览的文件名</p>

<p>FNR 浏览文件的记录数</p>

<p>FS 设置输入域分隔符，等价于命令行- F选项</p>

<p>NF 浏览记录的域个数</p>

<p>NR 已读的记录数</p>

<p>OFS 输出域分隔符</p>

<p>ORS 输出记录分隔符</p>

<p>RS 控制记录分隔符</p>

<h2>三、awk操作符 </h2>

<p>= += *= / = %= ^ = 赋值操作符</p>

<p>？   条件表达操作符</p>

<p>|| &amp;&amp; !   或、与、非（上一节已讲到）</p>

<p>~!~   匹配操作符，包括匹配和不匹配</p>

<p>&lt; &lt;= == != >>  关系操作符</p>

<p><code>+ - * / % ^  算术操作符</code></p>

<p><code>+ + --   前缀和后缀</code></p>

<p>1、设置输入域到域变量名</p>

<p>cat crontab.bak  | awk 'BEGIN{numall=20}{if($1~/[0-9]*/ &amp;&amp; $i>numall &amp;&amp; NR &lt; 10) num+=$1} END{print num}'</p>

<h2>四、内置的字符串函数 </h2>

<p>gsub(r,s) 在整个$ 0中用s替代r</p>

<p>gsub(r,s,t) 在整个t中用s替代r</p>

<p>index(s,t) 返回s中字符串t的第一位置</p>

<p>length(s) 返回s长度</p>

<p>match(s,r) 测试s是否包含匹配r的字符串</p>

<p>split( s,a,fs) 在fs上将s分成序列a</p>

<p>sprint(fmt,exp) 返回经fmt格式化后的exp</p>

<p>sub(r,s) 用$ 0中最左边最长的子串代替s</p>

<p>substr(s,p) 返回字符串s中从p开始的后缀部分</p>

<p>substr(s,p,n) 返回字符串s中从p开始长度为n的后缀部分</p>

<p>实例：</p>

<p>1、awk ' BEGIN{numall=10}{gsub(12,20);if($1~/[0-9]*/  &amp;&amp; NR &lt; 10) num+=length($0);print substr($0,1,index($0,"="));} END{print num}'</p>

<p>2、awk 'BEGIN {print split("123#456#678",myarray,"#")}'</p>

<p>   awk 'BEGIN { split("123#456#678",myarray,"#");print myarray[2]}'</p>

<h2>五、字符串屏蔽序列 </h2>

<p>\b 退格键 \t tab键</p>

<p>\f 走纸换页 \ddd 八进制值</p>

<p>\n 新行 \c 任意其他特殊字符，例如\为反斜线符号</p>

<p>\r 回车键</p>

<p>1、printf修饰符</p>

<p><code>- 左对齐</code></p>

<p>Width 域的步长，用0表示0步长</p>

<p>.prec 最大字符串长度，或小数点右边的位数</p>

<p>%c ASCII字符</p>

<p>%d 整数</p>

<p>%e 浮点数，科学记数法</p>

<p>%f 浮点数，例如（123.44）</p>

<p>%g awk决定使用哪种浮点数转换e或者f</p>

<p>%o 八进制数</p>

<p>%s 字符串</p>

<p>%x 十六进制数</p>

<p>如：awk '{printf "%-15s %s",$1,$3}'</p>

<br /> 


<p>本文<strong>转载</strong>自<a href="http://www.xuephp.com/main/detail.php?cid=22838">awk学习整理和使用实例</a>。  <br/>
本文地址：<a href="http://tinyxd.me/blog/2012/08/01/awk-study/">http://tinyxd.me/blog/2012/08/01/awk-study/</a>。</p>
]]></content>
  </entry>
  
</feed>
